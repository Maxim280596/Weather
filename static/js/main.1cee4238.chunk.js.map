{"version":3,"sources":["graphql/Queries.js","Components/Search.js","Components/WeatherCard.js","Components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["GET_WEATHER_QUERY","gql","StyledButton","withStyles","root","borderRadius","border","color","height","padding","label","textTransform","Button","Search","setCity","getData","error","Grid","container","spacing","item","xs","TextField","fullWidth","data-testid","id","onBlur","e","size","variant","onClick","Icon","useStyles","makeStyles","margin","minWidth","minHeight","background","bullet","display","transform","title","fontSize","opacity","pos","marginBottom","marginTop","paddingsLeft","term","info","temp","paddingTop","WeatherCard","city","temperature","wind","description","country","min","icon","max","feelsLike","all","humidity","visibility","convertToCelsium","K","Math","trunc","classes","bull","className","Card","CardContent","Typography","component","align","direction","justify","alignItems","theme","value","format","center","err","Home","useState","citySearched","setCitySearched","setErrors","useLazyQuery","variables","name","getWeather","data","target","getCityByName","weather","actual","summary","speed","clouds","App","client","ApolloClient","cache","InMemoryCache","uri","Container","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1cee4238.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const GET_WEATHER_QUERY = gql`\r\n  query getCityByName($name: String!) {\r\n      getCityByName(name: $name) {    \r\n          name\r\n          country\r\n          weather {\r\n            summary {\r\n                    title\r\n                    description\r\n                    icon\r\n                    }\r\n              temperature {\r\n                    actual\r\n                    feelsLike\r\n                    min\r\n                    max\r\n                    }\r\n              wind {\r\n                    speed\r\n                    deg\r\n                    }\r\n              clouds {\r\n                    all\r\n                    visibility\r\n                    humidity\r\n                    }\r\n              timestamp\r\n            }\r\n        }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { withStyles } from '@material-ui/core';\r\n\r\nconst StyledButton = withStyles({\r\n  root: {\r\n    borderRadius: 3,\r\n    border: 0,\r\n    color: 'black',\r\n    height: 48,\r\n    padding: '0 30px',\r\n  },\r\n  label: {\r\n    textTransform: 'capitalize',\r\n  },\r\n})(Button);\r\n\r\nconst Search = ({ setCity, getData, error }) => {\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={10}>\r\n        <TextField\r\n          fullWidth\r\n          error={error}\r\n          data-testid=\"custom-input\"\r\n          id=\"standard-basic\"\r\n          label=\"City name...\"\r\n          onBlur={(e) => setCity(e)}\r\n          // value= \"\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={2}>\r\n        <StyledButton\r\n          size=\"large\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={getData}\r\n        >\r\n          <Icon>search</Icon>Search\r\n        </StyledButton>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport Thermometer from 'react-thermometer-component';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    margin: '30px 0',\r\n    minWidth: 275,\r\n    minHeight: 280,\r\n\r\n    background: 'rgba(255, 255, 255, 0.3)',\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n    opacity: 1,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n    opacity: 1,\r\n    color: 'black',\r\n    marginTop: 20,\r\n    paddingsLeft: 10,\r\n    fontSize: 20,\r\n  },\r\n  term: {\r\n    marginTop: 10,\r\n    marginBottom: 10,\r\n  },\r\n  info: {\r\n    paddingsLeft: 10,\r\n  },\r\n  temp: {\r\n    paddingTop: -15,\r\n  },\r\n});\r\n\r\nconst WeatherCard = ({\r\n  city,\r\n  temperature,\r\n  wind,\r\n  description,\r\n  country,\r\n  icon,\r\n  min,\r\n  max,\r\n  feelsLike,\r\n  all,\r\n  humidity,\r\n  visibility,\r\n}) => {\r\n  const convertToCelsium = (K) => {\r\n    return Math.trunc(K - 273.15);\r\n  };\r\n  const classes = useStyles();\r\n  const bull = <span className={classes.bullet}>•</span>;\r\n\r\n  return (\r\n    <Grid item xs={12}>\r\n      <Card className={classes.root}>\r\n        <Grid container spacing={5}>\r\n          <Grid item xs={8} className={classes.info}>\r\n            <CardContent>\r\n              <Typography variant=\"h4\" component=\"h2\" align=\"center\">\r\n                {city}\r\n                {bull}\r\n                {country}\r\n              </Typography>\r\n              <Typography className={classes.pos} color=\"textSecondary\">\r\n                <b>Temperature: </b>\r\n                actual: {convertToCelsium(temperature)}°C, feelsLike:{' '}\r\n                {convertToCelsium(feelsLike)}°C, min: {convertToCelsium(min)}°C,\r\n                max: {convertToCelsium(max)}°C\r\n              </Typography>\r\n              <Typography className={classes.pos} color=\"textSecondary\">\r\n                <b>Description:</b> {description}\r\n              </Typography>\r\n              <Typography className={classes.pos} color=\"textSecondary\">\r\n                <b>Wind Speed:</b> {wind}km per/hour\r\n              </Typography>\r\n\r\n              <Typography className={classes.pos} color=\"textSecondary\">\r\n                <b>Clouds: </b>\r\n                all: {all} %, humidity: {humidity}%, visibility: {visibility}\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            item\r\n            xs={4}\r\n            className={classes.term}\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Thermometer\r\n              theme=\"light\"\r\n              value={convertToCelsium(temperature)}\r\n              max=\"100\"\r\n              format=\"°C\"\r\n              size=\"large\"\r\n              height=\"230\"\r\n              className={classes.temp}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React, { useState } from 'react';\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport { Grid } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { GET_WEATHER_QUERY } from '../graphql/Queries';\r\nimport Search from './Search';\r\nimport WeatherCard from './WeatherCard';\r\n\r\nconst useStyles = makeStyles({\r\n  center: {\r\n    margin: '20px 0',\r\n  },\r\n  err: {\r\n    color: 'red'\r\n  }\r\n});\r\n\r\nconst Home = () => {\r\n  const classes = useStyles();\r\n  const [citySearched, setCitySearched] = useState('');\r\n  const [error, setErrors] = useState(false);\r\n  const [getWeather, { data }] = useLazyQuery(GET_WEATHER_QUERY, {\r\n    variables: { name: citySearched },\r\n  });\r\n\r\n  if (citySearched === '') {\r\n    setCitySearched('Kyiv');\r\n  }\r\n\r\n  const setCity = (e) => {\r\n    if (!e.target.value) {\r\n      setErrors(true);\r\n    } else {\r\n      setErrors(false);\r\n    }\r\n    setCitySearched(e.target.value);\r\n  };\r\n\r\n  const getData = () => {\r\n    getWeather()\r\n  }\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <Grid\r\n        container\r\n        item\r\n        xs={12}\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        className={classes.center}\r\n      >\r\n        <h1>Search For Weather</h1>\r\n      </Grid>\r\n      <Search setCity={setCity} getData={getData} error={error} />\r\n      <div>\r\n        {data ? (\r\n          <>\r\n            {data.getCityByName === null ? (\r\n              <h2 className={classes.err}>Error! Please, enter the correct city name!</h2>\r\n            ) : (\r\n              <WeatherCard\r\n                city={data.getCityByName.name}\r\n                country={data.getCityByName.country}\r\n                temperature={data.getCityByName.weather.temperature.actual}\r\n                description={data.getCityByName.weather.summary.description}\r\n                wind={data.getCityByName.weather.wind.speed}\r\n                icon={data.getCityByName.weather.summary.icon}\r\n                max={data.getCityByName.weather.temperature.max}\r\n                min={data.getCityByName.weather.temperature.min}\r\n                feelsLike={data.getCityByName.weather.temperature.feelsLike}\r\n                all={data.getCityByName.weather.clouds.all}\r\n                humidity={data.getCityByName.weather.clouds.humidity}\r\n                visibility={data.getCityByName.weather.clouds.visibility}\r\n              />\r\n            )}\r\n          </>\r\n        ) : (\r\n          <h2>Please enter your city and press button Search </h2>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","import React from 'react';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport Container from '@material-ui/core/Container';\n\nimport Home from './Components/Home';\n\nfunction App() {\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    uri: 'https://graphql-weather-api.herokuapp.com/',\n  });\n  return (\n    <ApolloProvider client={client}>\n      <Container maxWidth=\"md\">\n        <Home />\n      </Container>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}